Sure! Here’s a **complete WebSocket server implementation** using **Gin**, **JWT authentication**, **Redis Pub/Sub for scalability**, and **Goroutines for concurrency**.  

---

# **📌 Full Project Structure**
```
websocket-chat/
│── main.go
│── server/
│   ├── websocket.go   # WebSocket handling
│   ├── hub.go         # Manages clients
│   ├── auth.go        # JWT authentication
│── database/
│   ├── redis.go       # Redis Pub/Sub
│── config/
│   ├── config.go      # Environment variables
│── go.mod
│── go.sum
```

---

## **1️⃣ Install Dependencies**
Run the following command to install all required Go packages:
```sh
go mod init websocket-chat
go get github.com/gin-gonic/gin
go get github.com/gorilla/websocket
go get github.com/redis/go-redis/v9
go get github.com/golang-jwt/jwt/v4
go get github.com/jmoiron/sqlx
go get github.com/lib/pq
```

---

## **2️⃣ WebSocket Hub (Manages All Clients)**
📌 **`server/hub.go`**
```go
package server

import "sync"

// Client represents a WebSocket client
type Client struct {
	ID   string
	Conn *websocket.Conn
	Send chan []byte
}

// Hub manages WebSocket clients and broadcasting
type Hub struct {
	Clients    map[string]*Client
	Broadcast  chan []byte
	Register   chan *Client
	Unregister chan *Client
	mu         sync.Mutex
}

// Create a new hub instance
var hub = Hub{
	Clients:    make(map[string]*Client),
	Broadcast:  make(chan []byte),
	Register:   make(chan *Client),
	Unregister: make(chan *Client), 
}

// RunHub starts listening for events (client register, unregister, broadcast)
func RunHub() {
	for {
		select {
		case client := <-hub.Register:
			hub.mu.Lock()
			hub.Clients[client.ID] = client
			hub.mu.Unlock()

		case client := <-hub.Unregister:
			hub.mu.Lock()
			delete(hub.Clients, client.ID)
			close(client.Send)
			hub.mu.Unlock()

		case message := <-hub.Broadcast:
			hub.mu.Lock()
			for _, client := range hub.Clients {
				select {
				case client.Send <- message:
				default:
					delete(hub.Clients, client.ID)
					close(client.Send)
				}
			}
			hub.mu.Unlock()
		}
	}
}
```

---

## **3️⃣ WebSocket Connection Handling**
📌 **`server/websocket.go`**
```go
package server

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
	"github.com/websocket-chat/database"
)

// WebSocket upgrader
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // Allows all origins (not safe for production)
	},
}

// Handle WebSocket connections
func HandleWebSocketConnections(c *gin.Context) {
	token := c.Query("token")

	// Validate JWT token
	userID, err := ValidateJWT(token)
	if err != nil || userID == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
		return
	}

	// Upgrade HTTP request to WebSocket
	conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		log.Println("Error upgrading to WebSocket:", err)
		return
	}

	client := &Client{ID: userID, Conn: conn, Send: make(chan []byte)}
	hub.Register <- client

	go readMessages(client)
	go writeMessages(client)
}

// Read messages from a client
func readMessages(client *Client) {
	defer func() {
		hub.Unregister <- client
		client.Conn.Close()
	}()

	for {
		_, msg, err := client.Conn.ReadMessage()
		if err != nil {
			log.Println("Error reading message:", err)
			break
		}
		database.PublishToRedis(msg)
	}
}

// Write messages to a client
func writeMessages(client *Client) {
	defer client.Conn.Close()

	for msg := range client.Send {
		err := client.Conn.WriteMessage(websocket.TextMessage, msg)
		if err != nil {
			log.Println("Error writing message:", err)
			break
		}
	}
}
```

---

## **4️⃣ JWT Authentication**
📌 **`server/auth.go`**
```go
package server

import (
	"errors"
	"time"

	"github.com/golang-jwt/jwt/v4"
)

// Secret key (should be stored securely)
var jwtSecret = []byte("your-secret-key")

// Generate a JWT token
func GenerateJWT(userID string) (string, error) {
	claims := jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(time.Hour * 1).Unix(), // Token expires in 1 hour
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(jwtSecret)
}

// Validate JWT token
func ValidateJWT(tokenString string) (string, error) {
	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return jwtSecret, nil
	})

	if err != nil || !token.Valid {
		return "", errors.New("invalid token")
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return "", errors.New("invalid claims")
	}

	userID, ok := claims["user_id"].(string)
	if !ok {
		return "", errors.New("invalid user ID in token")
	}

	return userID, nil
}
```

---

## **5️⃣ Redis Pub/Sub for Scalability**
📌 **`database/redis.go`**
```go
package database

import (
	"context"
	"log"

	"github.com/redis/go-redis/v9"
)

var redisClient *redis.Client
var ctx = context.Background()

// Initialize Redis connection
func InitRedis() {
	redisClient = redis.NewClient(&redis.Options{
		Addr: "localhost:6379",
	})
}

// Publish message to Redis channel
func PublishToRedis(message []byte) {
	err := redisClient.Publish(ctx, "chat", message).Err()
	if err != nil {
		log.Println("Error publishing to Redis:", err)
	}
}

// Subscribe to Redis channel and broadcast messages
func SubscribeToRedis() {
	sub := redisClient.Subscribe(ctx, "chat")

	for msg := range sub.Channel() {
		hub.Broadcast <- []byte(msg.Payload)
	}
}
```

---

## **6️⃣ Main Entry Point**
📌 **`main.go`**
```go
package main

import (
	"fmt"

	"github.com/gin-gonic/gin"
	"github.com/websocket-chat/database"
	"github.com/websocket-chat/server"
)

func main() {
	// Initialize Redis
	database.InitRedis()

	// Create Gin router
	app := gin.Default()

	// Define WebSocket route
	app.GET("/ws", server.HandleWebSocketConnections)

	// Start WebSocket hub
	go server.RunHub()
	go database.SubscribeToRedis()

	// Start server
	fmt.Println("WebSocket server running on ws://localhost:8080/ws")
	app.Run(":8080")
}
```

---

## **✅ Summary**
🚀 **A fully functional WebSocket backend using Gin and Redis:**  
- **JWT Authentication** to validate users.  
- **WebSocket Hub** to manage real-time messaging.  
- **Redis Pub/Sub** for **scalability** across multiple servers.  
- **Goroutines + Channels** to handle concurrent clients.  

Would you like help with **Dockerizing this WebSocket server for deployment?** 🚀😊